@inject UserTokenStorage userTokenStorage

<AuthorizeView>
    <Authorized>
        @if(Tokens.Any())
        {
            <ul>
                @foreach (var token in Tokens)
                {
                    <li>
                        <input type="text" value="@token" readonly onClick="navigator.clipboard.writeText('@token');alert('copied @token to clipboard')">
                        <menu>
                            <li>
                                <button dangerous @onclick="() => DeleteToken(token)">✕</button>
                            </li>
                        </menu>
                    </li>
                }
            </ul>
        }
        else
        {
            <ul empty>
                <li>no tokens generated</li>
            </ul>
        }
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private string[] Tokens = [];

    protected override async Task OnInitializedAsync()
    {
        if(await authenticationState.GetUserName() is string user)
        {
            var userDirectory = userTokenStorage.For(user);
            var _ = userTokenStorage.Directory.WatchLive(async files =>
            {
                await InvokeAsync(() =>
                {
                    Tokens = files.Where(f => f.Parent == userDirectory).Select(f => f.Name).ToArray();
                    StateHasChanged();
                });
            });
        }
    }

    async Task DeleteToken(string token)
    {
        if (await authenticationState.GetUserName() is string user)
        {
            var file = userTokenStorage.For(user) / Filename.FromExtended(token);
            file.Delete();
        };
    }
}