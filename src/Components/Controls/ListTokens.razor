@using Conesoft.Blazor.Components.Base

@inject UserTokenStorage userTokenStorage

<LiveDirectory Directory="directory">
    @if(context.Files.Any())
    {
        <ul>
            @foreach (var file in context.Files)
            {
                <li>
                    <input type="text" value="@file.NameWithoutExtension" readonly onClick="navigator.clipboard.writeText('@file.NameWithoutExtension');alert('copied @file.NameWithoutExtension to clipboard')">
                    <menu>
                        <li>
                            <button dangerous @onclick="() => DeleteToken(file.NameWithoutExtension)">✕</button>
                        </li>
                    </menu>
                </li>
            }
        </ul>
    }
    else
    {
        <ul empty>
            <li>no tokens generated</li>
        </ul>
    }
</LiveDirectory>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    Directory? directory;

    protected override async Task OnInitializedAsync()
    {
        if (await authenticationState.GetUserName() is string user)
        {
            directory = userTokenStorage.For(user);
        }
    }

    async Task DeleteToken(string token)
    {
        if (await authenticationState.GetUserName() is string user)
        {
            var file = userTokenStorage.For(user) / Filename.FromExtended(token);
            await file.Delete();
        }
        ;
    }
}