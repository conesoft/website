<AuthorizeView>
    <Authorized>
        <form method="post" enctype="multipart/form-data" action="/user/update-profile-picture">
            @{
                var user = context.User.Identity?.Name ?? "--noname--";
                var profilePicture = $"/user/{user}.jpg?{Random.Shared.Next()}";
            }
            <img src="@(TemporaryPicture ?? profilePicture)" />
            <InputFile id="file" name="file" OnChange=ChangeProfilePicture />
            <label for="file">
                @if (TemporaryPicture == null)
                {
                    <span>change profile picture</span>
                }
            </label>
            <AntiforgeryToken />
            <input type="hidden" name="redirectto" value="/">
            @if (TemporaryPicture != null)
            {
                <input type="submit" class="button" value="save" />
                <input type="reset" class="button" value="cancel" @onclick=CancelChanging />
            }
        </form>
    </Authorized>
</AuthorizeView>

@code {
    string? TemporaryPicture { get; set; }

    async Task ChangeProfilePicture(InputFileChangeEventArgs inputFileChangeEventArgs)
    {
        var image = await inputFileChangeEventArgs.File.RequestImageFileAsync("image/png", 600, 600);
        using Stream imageStream = image.OpenReadStream(1024 * 1024 * 10);
        using MemoryStream ms = new();
        await imageStream.CopyToAsync(ms);
        TemporaryPicture = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
    }

    void CancelChanging()
    {
        TemporaryPicture = null;
    }
}